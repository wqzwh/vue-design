(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{76:function(t,s,a){"use strict";a.r(s);var n=a(0),o=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"句法分析-生成真正的ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#句法分析-生成真正的ast","aria-hidden":"true"}},[t._v("#")]),t._v(" 句法分析 - 生成真正的AST")]),a("p",[t._v("在上一章中，我们讲解了解析 "),a("code",[t._v("html")]),t._v(" 字符串时词法分析的方式，本章我们将再进一步，讲解 "),a("code",[t._v("Vue")]),t._v(" 是如何在词法分析的基础上构建抽象语法树("),a("code",[t._v("AST")]),t._v(")的，即句法分析。")]),a("p",[t._v("打开 "),a("code",[t._v("src/compiler/index.js")]),t._v(" 文件，注意如下高亮的那句代码：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optimize "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("optimize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("generate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("可以看到 "),a("code",[t._v("parse")]),t._v(" 函数的返回值就是抽象语法树("),a("code",[t._v("AST")]),t._v(")，根据文件头部的引用关系可知 "),a("code",[t._v("parse")]),t._v(" 函数来自于 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件，实际上该文件所有的内容都在做一件事，即创建 "),a("code",[t._v("AST")]),t._v("。")]),a("p",[t._v("本章的讲解目标就是 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件，不过具体到源码之前，我们有必要独立思考一下如何根据词法分析创建一个抽象语法树。")]),a("h2",{attrs:{id:"根据令牌生成ast的思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#根据令牌生成ast的思路","aria-hidden":"true"}},[t._v("#")]),t._v(" 根据令牌生成AST的思路")]),a("p",[t._v("在上一节的末尾我们讲解了 "),a("code",[t._v("parseHTML")]),t._v(" 函数的使用，该函数接收一些选项参数，其中包括几个重要的钩子函数，如每当遇到一个开始标签时会调用的 "),a("code",[t._v("options.start")]),t._v(" 钩子函数，每当遇到一个结束标签时会调用的 "),a("code",[t._v("options.end")]),t._v(" 钩子函数等等。实际上一颗抽象语法树的构建最关键的就是这两个钩子函数，接下来我们简单讲解一下构建抽象语法树的思路。")]),a("p",[t._v("假设我们有一段 "),a("code",[t._v("html")]),t._v(" 字符串，如下：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("文本"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("那么最终生成的这颗树应该是与如上 "),a("code",[t._v("html")]),t._v(" 字符串的结构一一对应的：")]),a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("├── ul\n│   ├── li\n│   │   ├── span\n│   │   │   ├── 文本\n")])]),a("p",[t._v("如果每一个节点我们都用一个 "),a("code",[t._v("javascript")]),t._v(" 对象来表示的话，那么 "),a("code",[t._v("ul")]),t._v(" 标签可以表示为如下对象：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("由于每个节点都存在一个父节点和若干子节点，所以我们为如上对象添加两个属性："),a("code",[t._v("parent")]),t._v(" 和 "),a("code",[t._v("children")]),t._v("，分别用来表示当前节点的父节点和它所包含的子节点：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("同时每个元素节点还可能包含很多属性("),a("code",[t._v("attributes")]),t._v(")，所以我们可以为每个节点添加 "),a("code",[t._v("attrsList")]),t._v(" 属性，用来存储当前节点所拥有的属性：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("按照以上思路，实际上你可以为节点的描述对象添加任何你需要的属性，从而进一步描述该节点的特征。如果使用如上这个对象描述之前定义的 "),a("code",[t._v("html")]),t._v(" 字符串，那么这颗抽象语法树应该长成如下这个样子：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'ul'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'li'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ul"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n          type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'span'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" li"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n              type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" span"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'文本'")]),t._v("\n            "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n          "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("实际上构建抽象语法树的工作就是创建一个类似如上所示的一个能够描述节点关系的对象树，节点与节点之间通过 "),a("code",[t._v("parent")]),t._v(" 和 "),a("code",[t._v("children")]),t._v(" 建立联系，每个节点的 "),a("code",[t._v("type")]),t._v(" 属性用来标识该节点的类别，比如 "),a("code",[t._v("type")]),t._v(" 为 "),a("code",[t._v("1")]),t._v(" 代表该节点为元素节点，"),a("code",[t._v("type")]),t._v(" 为 "),a("code",[t._v("2")]),t._v(" 代表该节点为文本节点，这只是认为的一个规定，你可以用任何方便的方式加以区分。")]),a("p",[t._v("明白了我们的目标，下面我们在回到 "),a("code",[t._v("parseHTML")]),t._v(" 函数，因为目前为止我们所拥有的只有这一个函数，我们需要使用该函数构建出一颗如上所述的描述对象。")]),a("p",[t._v("首先我们需要定义一个 "),a("code",[t._v("parse")]),t._v(" 函数，假设该函数就是用来把 "),a("code",[t._v("html")]),t._v(" 字符串生成 "),a("code",[t._v("AST")]),t._v(" 的，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  "),a("span",{attrs:{class:"token comment"}},[t._v("//...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("如上代码所示，我们在 "),a("code",[t._v("parse")]),t._v(" 函数内定义了变量 "),a("code",[t._v("root")]),t._v(" 并将其返回，其中 "),a("code",[t._v("root")]),t._v(" 所代表的就是整个 "),a("code",[t._v("AST")]),t._v("，"),a("code",[t._v("parse")]),t._v(" 函数体中间的所有代码都是为了充实 "),a("code",[t._v("root")]),t._v(" 变量。怎么充实呢？这是我们需要借助 "),a("code",[t._v("parseHTML")]),t._v(" 函数帮助我们解析 "),a("code",[t._v("html")]),t._v(" 字符串，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("我们从简出发，假设我们要解析的 "),a("code",[t._v("html")]),t._v(" 字符串如下：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("这段 "),a("code",[t._v("html")]),t._v(" 字符串仅仅是一个简单的 "),a("code",[t._v("div")]),t._v(" 标签，甚至没有任何子节点。若要解析如上标签我们可以编写如下代码：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}}),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("如上高亮代码所示，在 "),a("code",[t._v("start")]),t._v(" 钩子函数中首先定义了 "),a("code",[t._v("element")]),t._v(" 常量，它就是元素节点的描述对象，接着判断 "),a("code",[t._v("root")]),t._v(" 是否存在，如果不存在则直接将 "),a("code",[t._v("element")]),t._v(" 赋值给 "),a("code",[t._v("root")]),t._v("。这段代码对于解析 "),a("code",[t._v("'<div></div>'")]),t._v(" 这段 "),a("code",[t._v("html")]),t._v(" 字符串来说已经足够了，当解析这段 "),a("code",[t._v("html")]),t._v(" 字符串时首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("start")]),t._v(" 钩子函数将被调用，最终 "),a("code",[t._v("root")]),t._v(" 变量将被设置为：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("但是当解析的 "),a("code",[t._v("html")]),t._v(" 字符串稍微复杂一点的时候，这段用来解析的代码就不能正常使用了，比如对于如下这段 "),a("code",[t._v("html")]),t._v(" 字符串：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("这段 "),a("code",[t._v("html")]),t._v(" 字符串比之前的 "),a("code",[t._v("html")]),t._v(" 字符串的不同之处在于 "),a("code",[t._v("div")]),t._v(" 标签多了一个子节点，即多了一个 "),a("code",[t._v("span")]),t._v(" 标签。如果继续沿用之前的解析代码，当解析如上 "),a("code",[t._v("html")]),t._v(" 字符串时首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("start")]),t._v(" 钩子函数被调用，"),a("code",[t._v("root")]),t._v(" 变量被设置为：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("接着会遇到 "),a("code",[t._v("span")]),t._v(" 元素的开始标签，会再次调用 "),a("code",[t._v("start")]),t._v(" 钩子函数，由于此时 "),a("code",[t._v("root")]),t._v(" 变量已经存在，所以不会再次设置 "),a("code",[t._v("root")]),t._v(" 变量。为了能够更好的解析 "),a("code",[t._v("span")]),t._v(" 标签，我们需要多值钱的解析代码做一些改变，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentParent")]),t._v("  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("        parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("        attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element")]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("如上代码所示，首先我们需要定义 "),a("code",[t._v("currentParent")]),t._v(" 变量，它的作用是没遇到一个非一元标签，都会将该标签的描述对象作为 "),a("code",[t._v("currentParent")]),t._v(" 的值，这样当解析该非一元标签的子节点时，子节点的父级就是 "),a("code",[t._v("currentParent")]),t._v(" 变量。另外在 "),a("code",[t._v("start")]),t._v(" 钩子函数内部我们在创建 "),a("code",[t._v("element")]),t._v(" 描述对象时我们使用 "),a("code",[t._v("currentParent")]),t._v(" 的值作为每个元素描述对象的 "),a("code",[t._v("parent")]),t._v(" 属性的值。")]),a("p",[t._v("如果用以上代码解析如下 "),a("code",[t._v("html")]),t._v(" 字符串：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("那么其过程大概是这样的：手下会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时由于 "),a("code",[t._v("root")]),t._v(" 不存在，并且 "),a("code",[t._v("currentParent")]),t._v(" 也不存在，所以会创建一个用于描述该 "),a("code",[t._v("div")]),t._v(" 元素的对象，并设置 "),a("code",[t._v("root")]),t._v(" 的值如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("还没完，由于 "),a("code",[t._v("div")]),t._v(" 元素是非一元标签，我们可以看到在 "),a("code",[t._v("start")]),t._v(" 钩子函数的末尾有一个 "),a("code",[t._v("if")]),t._v(" 条件语句，当一个元素为非一元标签时，会设置 "),a("code",[t._v("currentParent")]),t._v(" 为该元素的描述对象，所以此时 "),a("code",[t._v("currentParent")]),t._v(" 也是：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("接着解析这段 "),a("code",[t._v("html")]),t._v(" 字符串，会遇到 "),a("code",[t._v("span")]),t._v(" 元素开始的开始标签，由于此时 "),a("code",[t._v("root")]),t._v(" 已经存在，所以 "),a("code",[t._v("start")]),t._v(" 钩子函数会执行 "),a("code",[t._v("else...if")]),t._v(" 条件的判断，检查 "),a("code",[t._v("currentParent")]),t._v(" 是否存在，由于 "),a("code",[t._v("currentParent")]),t._v(" 存在，所以会将 "),a("code",[t._v("span")]),t._v(" 元素的描述对象添加到 "),a("code",[t._v("currentParent")]),t._v(" 的 "),a("code",[t._v("children")]),t._v(" 数组中作为子节点，所以最终生成的 "),a("code",[t._v("root")]),t._v(" 描述对象为：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'span'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" div"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("到现在为了，我们解析逻辑看上去可以用了，但实际上还是存在问题的，假设我们要解析 "),a("code",[t._v("html")]),t._v(" 字符串再稍微复杂一点，如下：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("在之前的基础上 "),a("code",[t._v("div")]),t._v(" 元素的子节点多了一个 "),a("code",[t._v("p")]),t._v(" 标签，按照现有的解析逻辑在解析这段 "),a("code",[t._v("html")]),t._v(" 字符串时，首先会遇到 "),a("code",[t._v("div")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("root")]),t._v(" 和 "),a("code",[t._v("currentParent")]),t._v(" 将被设置为 "),a("code",[t._v("div")]),t._v(" 标签的描述对象。接着会遇到 "),a("code",[t._v("span")]),t._v(" 元素的开始标签，此时 "),a("code",[t._v("span")]),t._v(" 标签的描述对象将被添加到 "),a("code",[t._v("div")]),t._v(" 标签描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中，同时别忘了 "),a("code",[t._v("span")]),t._v(" 元素也是非一元标签，所以 "),a("code",[t._v("currentParent")]),t._v(" 变量会被设置为 "),a("code",[t._v("span")]),t._v(" 标签的描述对象。接着继续解析，会遇到 "),a("code",[t._v("span")]),t._v(" 元素的结束标签，由于 "),a("code",[t._v("end")]),t._v(" 钩子函数什么都没做，直接跳过。再继续解析将遇到 "),a("code",[t._v("p")]),t._v(" 元素的开始标签，大家注意，"),a("strong",[t._v("在解析 "),a("code",[t._v("p")]),t._v(" 元素的开始标签时，由于 "),a("code",[t._v("currentParent")]),t._v(" 变量引用的是 "),a("code",[t._v("span")]),t._v(" 元素的描述对象，所以 "),a("code",[t._v("p")]),t._v(" 元素的描述对象将被添加到 "),a("code",[t._v("span")]),t._v(" 元素描述对象的 "),a("code",[t._v("children")]),t._v(" 数组中，被误认为是 "),a("code",[t._v("span")]),t._v(" 元素的子节点")]),t._v("。而事实上 "),a("code",[t._v("p")]),t._v(" 标签是 "),a("code",[t._v("div")]),t._v(" 元素的字节点，这就是问题所在。")]),a("p",[t._v("为了解决这个问题，我们需要每当遇到一个非一元标签的结束标签时，都将 "),a("code",[t._v("currentParent")]),t._v(" 变量的值回退到之前的元素描述对象，这样就能够保证当前正在解析的标签拥有正确的父级。当时如何回退呢？若要回退之前的值，那么必然需要一个变量保存之前的值，所以我们需要一个数组 "),a("code",[t._v("stack")]),t._v("，如下代码所示：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" root\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" currentParent\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("  \n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("root"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        root "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" element\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("        stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentParent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("pop")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      currentParent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("如上高亮代码所示，首先我们定义了 "),a("code",[t._v("stack")]),t._v(" 常量，它是一个数组，接着我们做了一些修改，每次遇到非一元开始标签的时候，除了设置 "),a("code",[t._v("currentParent")]),t._v(" 的值之外，还会将 "),a("code",[t._v("currentParent")]),t._v(" 添加到 "),a("code",[t._v("stack")]),t._v(" 数组。接着我们在 "),a("code",[t._v("end")]),t._v(" 钩子函数中添加了一句代码，也就是说每当遇到一个非一元标签的结束标签时，都会回退 "),a("code",[t._v("currentParent")]),t._v(" 变量的值为之前的值，这样我们就修正了当前正在解析的元素的父级元素。")]),a("p",[t._v("以上就是根据 "),a("code",[t._v("parseHTML")]),t._v(" 函数生成 "),a("code",[t._v("AST")]),t._v(" 的基本方式，实际上我们还考虑的还不够周全，比如上面的讲解中我们没有处理一元标签，另外我们还需要处理文本节点和注释节点等等。不过上面的讲解很好的为我们后续对源码的解析做了铺垫，更详细的内容我们将在接下来的源码分析阶段为大家仔细说明。")]),a("h2",{attrs:{id:"解析前的准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解析前的准备工作","aria-hidden":"true"}},[t._v("#")]),t._v(" 解析前的准备工作")]),a("p",[t._v("前面说过，整个 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件的所做的工作都是在创建 "),a("code",[t._v("AST")]),t._v("，所以我们应该先了解一下这个文件的结构，以方便后续的理解。在改文件的开头定义了一些常量和变量，其中包括一些正则常量，我们后续会详细讲解。")]),a("p",[t._v("接着定义了 "),a("code",[t._v("createASTElement")]),t._v(" 函数，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Attr"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[a("code",[t._v("createASTElement")]),t._v(" 函数用来创建一个元素的描述对象，这样我们在创建元素描述对象时就不需要手动编写对象字面量了，方便的同时还能提高代码整洁性。")]),a("p",[t._v("再往下定义了整个文件最重要的一个函数，即 "),a("code",[t._v("parse")]),t._v(" 函数，它的结构如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/*\n   * 省略...\n   * 省略的代码用来初始化一些变量的值，以及创建一些新的变量，其中包括 root 变量，该变量为 parse 函数的返回值，即 AST\n   */")]),t._v("\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warnOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("closeElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 其他选项...")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("通过如上代码的简化，我们可以清晰的看到 "),a("code",[t._v("parse")]),t._v(" 函数的结构，在 "),a("code",[t._v("parse")]),t._v(" 函数开头代码用来初始化一些变量的值，以及创建一些新的变量，其中包括 "),a("code",[t._v("root")]),t._v(" 变量，该变量为 "),a("code",[t._v("parse")]),t._v(" 函数的返回值，即最终的 "),a("code",[t._v("AST")]),t._v("。然后定义了两个函数 "),a("code",[t._v("warnOnce")]),t._v(" 和 "),a("code",[t._v("closeElement")]),t._v("。接着调用了 "),a("code",[t._v("parseHTML")]),t._v(" 函数，通过上一小节的铺垫，相信大家看到这里已经大概知道了 "),a("code",[t._v("parse")]),t._v(" 函数是如何创建 "),a("code",[t._v("AST")]),t._v(" 的了。另外我们能够注意到在调用 "),a("code",[t._v("parseHTML")]),t._v(" 函数时传递了很多选项，其中包括四个重要的钩子函数选项："),a("code",[t._v("start")]),t._v("、"),a("code",[t._v("end")]),t._v("、"),a("code",[t._v("chars")]),t._v(" 以及 "),a("code",[t._v("comment")]),t._v("。最后 "),a("code",[t._v("parse")]),t._v(" 函数将 "),a("code",[t._v("root")]),t._v(" 变量返回，也就是最终生成的 "),a("code",[t._v("AST")]),t._v("。")]),a("p",[t._v("在 "),a("code",[t._v("parse")]),t._v(" 函数的后面，定义了非常多的函数，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processPre")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRawAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processKey")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processRef")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("ForParseResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIf")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processIfConditions")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("findPrevElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("addIfCondition")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" condition"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTIfCondition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processOnce")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processSlot")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processComponent")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("processAttrs")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkInFor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseModifiers")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Object"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isTextTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isForbiddenTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("guardIESVGBug")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("checkForAliasModel")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token comment"}},[t._v("/* 省略...*/")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("我们能够发现这些函数的名字大部分都以 "),a("code",[t._v("process")]),t._v(" 开头，并且接收的参数中基本都包含 "),a("code",[t._v("el")]),t._v("，那么 "),a("code",[t._v("el")]),t._v(" 是什么呢？实际上 "),a("code",[t._v("el")]),t._v(" 就是元素的描述对象，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("那么 "),a("code",[t._v("process*")]),t._v(" 类的函数接收 "),a("code",[t._v("el")]),t._v(" 参数后都做了什么呢？实际上 "),a("code",[t._v("process*")]),t._v(" 类函数的作用就是对元素描述对象的进一步处理，比如其中一个函数叫做 "),a("code",[t._v("processPre")]),t._v("，这个函数的作用就是用来检测 "),a("code",[t._v("el")]),t._v(" 元素是否拥有 "),a("code",[t._v("v-pre")]),t._v(" 属性，如果有 "),a("code",[t._v("v-pre")]),t._v(" 属性则会在 "),a("code",[t._v("el")]),t._v(" 描述对象上添加一个 "),a("code",[t._v("pre")]),t._v(" 属性，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  pre"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("类似的，所有 "),a("code",[t._v("process*")]),t._v(" 类函数的作用都是为了让一个元素的描述对象更叫充实，使这个对象能更加详情的描述一个元素，并且这些函数都会用在 "),a("code",[t._v("parseHTML")]),t._v(" 函数的钩子选项函数中。")]),a("p",[t._v("另外我们也能看到很多非 "),a("code",[t._v("process*")]),t._v(" 类的函数，例如 "),a("code",[t._v("findPrevElement")]),t._v("、"),a("code",[t._v("makeAttrsMap")]),t._v(" 等等，这些函数实际上就是工具函数。")]),a("p",[t._v("以上就是 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件的整体结构。接下来我们将重新回到该文件的开头部分，来看看都定义了哪些常量或变量。")]),a("h3",{attrs:{id:"正则常量-onre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-onre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 onRE")]),a("p",[t._v("接下来我们将讲解定义在该文件中的一系列常量，首先要讲解的 "),a("code",[t._v("onRE")]),t._v(" 正则常量，其源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" onRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^@|^v-on:/")]),t._v("\n")])]),a("p",[t._v("这个常量用来匹配以字符 "),a("code",[t._v("@")]),t._v(" 或 "),a("code",[t._v("v-on:")]),t._v(" 开头的字符串，主要作用是检测标签属性名是否是监听事件的指令。")]),a("h3",{attrs:{id:"正则常量-dirre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-dirre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 dirRE")]),a("p",[t._v("正则常量 "),a("code",[t._v("dirRE")]),t._v(" 源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dirRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^v-|^@|^:/")]),t._v("\n")])]),a("p",[t._v("它用来匹配以字符 "),a("code",[t._v("v-")]),t._v(" 或 "),a("code",[t._v("@")]),t._v(" 或 "),a("code",[t._v(":")]),t._v(" 开头的字符串，主要作用是检测标签属性名是否是指令。所以通过这个正则我们可以知道，在 "),a("code",[t._v("vue")]),t._v(" 中所以 "),a("code",[t._v("v-")]),t._v(" 开头的属性都被认为是指令，另外 "),a("code",[t._v("@")]),t._v(" 字符是 "),a("code",[t._v("v-on")]),t._v(" 的缩写，"),a("code",[t._v(":")]),t._v(" 字符是 "),a("code",[t._v("v-bind")]),t._v(" 的缩写。")]),a("h3",{attrs:{id:"正则常量-foraliasre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-foraliasre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 forAliasRE")]),a("p",[t._v("其源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" forAliasRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/([^]*?)\\s+(?:in|of)\\s+([^]*)/")]),t._v("\n")])]),a("p",[t._v("该正则包含三个分组，第一个分组为 "),a("code",[t._v("([^]*?)")]),t._v("，该分组是一个惰性匹配的分组，它匹配的内容为任何字符，包括换行符等。第二个分组为 "),a("code",[t._v("(?:in|of)")]),t._v("，该分组用来匹配字符串 "),a("code",[t._v("in")]),t._v(" 或者 "),a("code",[t._v("of")]),t._v("，并且该分组是非捕获的分组。第三个分组为 "),a("code",[t._v("([^]*)")]),t._v("，与第一个分组类似，不同的是第三个分组是非惰性匹配。同时每个分组之间都会匹配至少一个空白符 "),a("code",[t._v("\\s+")]),t._v("。通过以上说明可知，正则 "),a("code",[t._v("forAliasRE")]),t._v(" 用来匹配 "),a("code",[t._v("v-for")]),t._v(" 属性的值，并捕获 "),a("code",[t._v("in")]),t._v(" 或 "),a("code",[t._v("of")]),t._v(" 前后的字符串。假设我们像如下这样使用 "),a("code",[t._v("v-for")]),t._v("：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("那么正则 "),a("code",[t._v("forAliasRE")]),t._v(" 用来匹配字符串 "),a("code",[t._v("'obj of list'")]),t._v("，并捕获到两个字符串 "),a("code",[t._v("'obj'")]),t._v(" 和 "),a("code",[t._v("'list'")]),t._v("。")]),a("h3",{attrs:{id:"正则常量-foriteratorre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-foriteratorre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 forIteratorRE")]),a("p",[t._v("源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" forIteratorRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/")]),t._v("\n")])]),a("p",[t._v("该正则用来匹配 "),a("code",[t._v("forAliasRE")]),t._v(" 第一个捕获组所捕获到的字符串，可以看到如上正则中拥有三个分组，有两个捕获的分组，第一个捕获组用来捕获一个不包含字符 "),a("code",[t._v("}")]),t._v(" 和 "),a("code",[t._v("]")]),t._v(" 的字符串，且该字符串前面有一个字符 "),a("code",[t._v(",")]),t._v("，如："),a("code",[t._v("', index'")]),t._v("。第二个分组为非捕获的分组，第三个分组为捕获的分组，其捕获的内容与第一个捕获组相同。")]),a("p",[t._v("举几个例子，我们知道 "),a("code",[t._v("v-for")]),t._v(" 有几种不同的写法，其中一种使用 "),a("code",[t._v("v-for")]),t._v(" 的方式是：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"obj of list"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),a("p",[t._v("如果像如上这样使用 "),a("code",[t._v("v-for")]),t._v("，那么 "),a("code",[t._v("forAliasRE")]),t._v(" 正则的第一个捕获组的内容为字符串 "),a("code",[t._v("'obj'")]),t._v("，此时使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则去匹配字符串 "),a("code",[t._v("'obj'")]),t._v(" 将得不到任何内容。")]),a("p",[t._v("第二种使用 "),a("code",[t._v("v-for")]),t._v(" 的方式为：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"(obj, index) of list"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),a("p",[t._v("此时 "),a("code",[t._v("forAliasRE")]),t._v(" 正则的第一个捕获组的内容为字符串 "),a("code",[t._v("'(obj, index)'")]),t._v("，如果去掉左右括号则该字符串为 "),a("code",[t._v("'obj, index'")]),t._v("，如果使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则去匹配字符串 "),a("code",[t._v("'obj, index'")]),t._v(" 则会匹配成功，并且 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则的第一个捕获组将捕获到字符串 "),a("code",[t._v("'index'")]),t._v("，但第二个捕获组捕获不到任何内容。")]),a("p",[t._v("第三种使用 "),a("code",[t._v("v-for")]),t._v(" 的方式为：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div v"),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"(value, key, index) in object"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])]),a("p",[t._v("以上方式主要用于遍历对象而非数组，此时 "),a("code",[t._v("forAliasRE")]),t._v(" 正则的第一个捕获组的内容为字符串 "),a("code",[t._v("'(value, key, index)'")]),t._v("，如果去掉左右括号则该字符串为 "),a("code",[t._v("'value, key, index'")]),t._v("，如果使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则去匹配字符串 "),a("code",[t._v("'value, key, index'")]),t._v(" 则会匹配成功，并且 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则的第一个捕获组将捕获到字符串 "),a("code",[t._v("'key'")]),t._v("，但第二个捕获组将捕获到字符串 "),a("code",[t._v("'index'")]),t._v("。")]),a("h3",{attrs:{id:"正则常量-stripparensre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-stripparensre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 stripParensRE")]),a("p",[t._v("源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stripParensRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\(|\\)$/g")]),t._v("\n")])]),a("p",[t._v("这个捕获组用来捕获要么以字符 "),a("code",[t._v("(")]),t._v(" 开头，要么以字符 "),a("code",[t._v(")")]),t._v(" 结尾的字符串，或者两者都满足。那么这个正则的作用是什么呢？我们在讲解正则 "),a("code",[t._v("forIteratorRE")]),t._v(" 时有个细节不知道大家注意到了没有，就是 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则所匹配的字符串是 "),a("code",[t._v("'obj, index'")]),t._v("，而不是 "),a("code",[t._v("'(obj, index)'")]),t._v("，这两个字符串的区别就在于第二个字符串拥有左右括号，所以在使用 "),a("code",[t._v("forIteratorRE")]),t._v(" 正则之前，需要使用 "),a("code",[t._v("stripParensRE")]),t._v(" 正则去掉字符串 "),a("code",[t._v("'(obj, index)'")]),t._v(" 中的左右括号，实现方式很简单：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token string"}},[t._v("'(obj, index)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stripParensRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("h3",{attrs:{id:"正则常量-argre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-argre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 argRE")]),a("p",[t._v("源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" argRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/:(.*)$/")]),t._v("\n")])]),a("p",[t._v("正则 "),a("code",[t._v("argRE")]),t._v(" 用来匹配指令中的参数，如下：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("v-on:")]),t._v("click.stop")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("handleClick"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("其中 "),a("code",[t._v("v-on")]),t._v(" 为指令，"),a("code",[t._v("click")]),t._v(" 为传递给 "),a("code",[t._v("v-on")]),t._v(" 指令的参数，"),a("code",[t._v("stop")]),t._v(" 为修饰符。所以 "),a("code",[t._v("argRE")]),t._v(" 正则用来匹配指令编写中的参数，并且拥有一个捕获组，用来捕获参数的名字。")]),a("h3",{attrs:{id:"正则常量-bindre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-bindre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 bindRE")]),a("p",[t._v("源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" bindRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^:|^v-bind:/")]),t._v("\n")])]),a("p",[t._v("该正则用来匹配以字符 "),a("code",[t._v(":")]),t._v(" 或字符串 "),a("code",[t._v("v-bind:")]),t._v(" 开头的字符串，主要用来检测一个标签的属性是否是绑定("),a("code",[t._v("v-bind")]),t._v(")。")]),a("h3",{attrs:{id:"正则常量-modifierre"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则常量-modifierre","aria-hidden":"true"}},[t._v("#")]),t._v(" 正则常量 modifierRE")]),a("p",[t._v("源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" modifierRE "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/\\.[^.]+/g")]),t._v("\n")])]),a("p",[t._v("该正则用来匹配修饰符的，但是并没有捕获任何东西，举例如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-on.click.stop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modifierRE"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("那么 "),a("code",[t._v("matchs")]),t._v(" 数组第一个元素为字符串 "),a("code",[t._v("'.stop'")]),t._v("，所以指令名字应该是：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("matchs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 'stop'")]),t._v("\n")])]),a("h3",{attrs:{id:"html-实体解码函数-decodehtmlcached"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#html-实体解码函数-decodehtmlcached","aria-hidden":"true"}},[t._v("#")]),t._v(" HTML 实体解码函数 decodeHTMLCached")]),a("p",[t._v("源码如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decodeHTMLCached "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("cached")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("he"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("decode"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[a("code",[t._v("cached")]),t._v(" 函数我们前面遇到过，它的作用是接收一个函数作为参数并返回一个新的函数，新函数的功能与作为参数传递的函数功能相同，唯一不同的是多了新函数将会缓存值，如果一个函数在接收相同参数的情况下所返回的值总是相同的，那么 "),a("code",[t._v("cached")]),t._v(" 函数将会为该函数提供性能提升的优势。")]),a("p",[t._v("可以看到传递给 "),a("code",[t._v("cached")]),t._v(" 函数的参数是 "),a("code",[t._v("he.decode")]),t._v(" 函数，其中 "),a("code",[t._v("he")]),t._v(" 为第三方的库，"),a("code",[t._v("he.decode")]),t._v(" 函数用于 "),a("code",[t._v("HTML")]),t._v(" 字符实体的解码工作，如：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("he"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("decode")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'&#x26;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// &#x26; -> '&'")]),t._v("\n")])]),a("p",[t._v("由于字符实体 "),a("code",[t._v("&#x26;")]),t._v(" 代表的字符为 "),a("code",[t._v("&")]),t._v("。所以字符串 "),a("code",[t._v("&#x26;")]),t._v(" 经过解码后将变为字符 "),a("code",[t._v("&")]),t._v("。"),a("code",[t._v("decodeHTMLCached")]),t._v(" 函数在后面将被用于对纯文本的解码，如果不进行解码，那么用户将无法使用字符实体编写字符。")]),a("h3",{attrs:{id:"定义平台化选项变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义平台化选项变量","aria-hidden":"true"}},[t._v("#")]),t._v(" 定义平台化选项变量")]),a("p",[t._v("再往下，定义了一些平台化的选项变量，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" delimiters\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" transforms\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" preTransforms\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" postTransforms\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" platformIsPreTag\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" platformMustUseProp\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" platformGetTagNamespace\n")])]),a("p",[t._v("上面的代码中定义了 "),a("code",[t._v("7")]),t._v(" 个平台化的变量，为什么说上面这些变量为平台化的选项变量呢？后面当我们讲解 "),a("code",[t._v("parse")]),t._v(" 函数时，我们能够看到这些变量将被初始化一个值，这些值都是平台化的编译器选项参数，不同平台这些变量将被初始化的值是不同的。我们可以找到 "),a("code",[t._v("parse")]),t._v(" 函数看一下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  warn "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n\n  platformIsPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isPreTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  platformMustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mustUseProp "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  platformGetTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getTagNamespace "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n\n  transforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'transformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  preTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'preTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  postTransforms "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("pluckModuleFunction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'postTransformNode'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  delimiters "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("如上代码所示，可以清晰的看到在 "),a("code",[t._v("parse")]),t._v(" 函数的一开始为这 "),a("code",[t._v("7")]),t._v(" 个平台化的变量进行了初始化，初始化的值都是我们曾经讲过的编译器的选项参数，由于我们前面所讲解的都是 "),a("code",[t._v("web")]),t._v(" 平台下的编译器选项，所以这里初始化的值都只用于 "),a("code",[t._v("web")]),t._v(" 平台。")]),a("h3",{attrs:{id:"createastelement-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#createastelement-函数","aria-hidden":"true"}},[t._v("#")]),t._v(" createASTElement 函数")]),a("p",[t._v("在平台化变量的后面，定义了 "),a("code",[t._v("createASTElement")]),t._v(" 函数，这个函数的作用就是方便我们创建一个节点，或者说方便我们创建一个元素的描述对象，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Attr"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("它接收三个参数，分别是标签名字 "),a("code",[t._v("tag")]),t._v("，该标签拥有的属性数组 "),a("code",[t._v("attrs")]),t._v(" 以及该标签的父标签描述对象的引用。比如我们使用 "),a("code",[t._v("parseHTML")]),t._v(" 解析如下标签时：")]),a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("obj of list"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("class")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("box"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),a("p",[t._v("当遇 "),a("code",[t._v("div")]),t._v(" 的开始标签时 "),a("code",[t._v("parseHTML")]),t._v(" 函数的 "),a("code",[t._v("start")]),t._v(" 钩子函数的前连个参数分别是：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('\'<div v-for="obj of list" class="box"></div>\'')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 'div'")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// [ { name: 'v-for', value: 'obj of list' }, { name: 'class', value: 'box' } ]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("此时我们只需要调用 "),a("code",[t._v("createASTElement")]),t._v(" 函数并将这两个参数传递过去，即可创建该 "),a("code",[t._v("div")]),t._v(" 标签的描述对象：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('\'<div v-for="obj of list" class="box"></div>\'')]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 'div'")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// [ { name: 'v-for', value: 'obj of list' }, { name: 'class', value: 'box' } ]")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createASTElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),a("p",[t._v("最终创建出来的元素描述对象如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("上面的描述对象中的 "),a("code",[t._v("parent")]),t._v(" 属性我们没有细说，其实在上一小节我们讲解思路的时候已经接触过 "),a("code",[t._v("currentParent")]),t._v(" 变量的作用，实际上元素描述对象间的引用关系就是通过 "),a("code",[t._v("currentParent")]),t._v(" 完成的，后面会仔细讲解。另外我们注意到描述对象中除了 "),a("code",[t._v("attrsList")]),t._v(" 属性是原始的标签属性数组之后，还有一个叫做 "),a("code",[t._v("attrsMap")]),t._v(" 属性：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("这个属性是什么呢？可以看到它的值是 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数的返回值，并且 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数接收一个参数，该参数恰好是标签的属性数组 "),a("code",[t._v("attrs")]),t._v("，此时我们需要查看一下 "),a("code",[t._v("makeAttrsMap")]),t._v(" 的代码，如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeAttrsMap")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Object"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" map "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isIE "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isEdge\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'duplicate attribute: '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" map\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("我们首先注意 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数的第一句代码和最后一句代码，第一句代码定义了 "),a("code",[t._v("map")]),t._v(" 常量并在最后一句代码中将其返回，在这两句代码中间是一个 "),a("code",[t._v("for")]),t._v(" 循环，用于遍历 "),a("code",[t._v("attrs")]),t._v(" 数组，注意 "),a("code",[t._v("for")]),t._v(" 循环内有这样一句代码：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("map"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value\n")])]),a("p",[t._v("也就是说，如果标签的属性数组 "),a("code",[t._v("attrs")]),t._v(" 为：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),a("p",[t._v("那么最终生成的 "),a("code",[t._v("map")]),t._v(" 对象则是：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("map "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("所以 "),a("code",[t._v("makeAttrsMap")]),t._v(" 函数的作用就是将标签的属性数组转换成名值对一一对象的对象。这么做坑定是有目的的，我们后面遇到了再讲，总之最终生成的元素描述对象如下：")]),a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("element "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsList"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrsMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'obj of list'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'box'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  children"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),a("p",[t._v("以上就是 "),a("code",[t._v("parse")]),t._v(" 函数之前定义的所有常量、变量以及函数的讲解，接下来我们将正式进入 "),a("code",[t._v("parse")]),t._v(" 函数的实现讲解。")]),a("h2",{attrs:{id:"对令牌的加工"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对令牌的加工","aria-hidden":"true"}},[t._v("#")]),t._v(" 对令牌的加工")]),a("h3",{attrs:{id:"增强的-class"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增强的-class","aria-hidden":"true"}},[t._v("#")]),t._v(" 增强的 class")]),a("h3",{attrs:{id:"增强的-style"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#增强的-style","aria-hidden":"true"}},[t._v("#")]),t._v(" 增强的 style")]),a("h3",{attrs:{id:"特殊的-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊的-model","aria-hidden":"true"}},[t._v("#")]),t._v(" 特殊的 model")]),a("h2",{attrs:{id:"生成抽象语法树-ast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成抽象语法树-ast","aria-hidden":"true"}},[t._v("#")]),t._v(" 生成抽象语法树(AST)")]),a("h2",{attrs:{id:"静态优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 静态优化")])])}],!1,null,null,null);s.default=o.exports}}]);